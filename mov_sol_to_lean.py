#!/usr/bin/python3

import argparse
import os
from data_loader import load_xsb_levels, encode_sokoban_level_to_lines
from directions import *

def remove_suffix(s, suff):
    if suff and s.endswith(suff):
        return s[:-len(suff)]
    else: return s

parser = argparse.ArgumentParser(
    prog='mov_sol_to_lean',
    description='Converts a ".mov" solution generated by sokodlex into a lean proof')
parser.add_argument('--datadir', type = str, default = "data/Large Test Suite Sets/")
parser.add_argument('--data_suffix', type = str, default = ".xsb")
parser.add_argument('fname', type=str, help='solution file_name, path is expected to correspond to the levelset')
args = parser.parse_args()

level_var_dir, _ = os.path.split(args.fname)
_, level_fname = os.path.split(level_var_dir)
i = level_fname.rindex('_l')
level_i = int(level_fname[i+2:])
levelset_fname = os.path.join(args.datadir, level_fname[:i]+args.data_suffix)

print("-- Solution:", args.fname)
print("-- Levelset:", levelset_fname)
print("-- Level:", level_i)
print()

levels = load_xsb_levels(levelset_fname)
level = levels[level_i-1]
with open(args.fname) as f:
    line = next(f)
sol = [c_to_dir[d] for d in line.strip()]

print("import .sokolevel")
print("import .show_sokolevel")
print()
print('def {} := sokolevel.from_string "'.format(level_fname))
for line in encode_sokoban_level_to_lines(level):
    print(line)
print('"')
print()
print("theorem {}.solvable : {}.solvable :=".format(level_fname, level_fname))
print("begin [show_sokolevel]")
for d in sol:
    print("  sokolevel.solve_{},".format(dir_to_str(d).lower()))
print("  sokolevel.solve_finish")
print("end")
