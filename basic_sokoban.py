#!/usr/bin/python3

import numpy as np

from directions import *

# A basic Sokoban implementation for solution verification

class SokoBasic:
    def __init__(self, level):
        self.height = level.height
        self.width = level.width

        h = self.height
        w = self.width

        self.walls = np.ones([h+2, w+2], dtype = bool)
        self.storages = np.zeros([h+2, w+2], dtype = bool)
        self.boxes = np.zeros([h+2, w+2], dtype = bool)

        self.walls[1:h+1,1:w+1] = level.walls
        self.storages[1:h+1,1:w+1] = np.array(level.storages)
        self.boxes[1:h+1,1:w+1] = np.array(level.boxes)
        self.storekeeper = level.storekeeper

    def step(self, d):
        storekeeper_n = dir_shift(d, self.storekeeper)
        if self.walls[storekeeper_n]: return False

        if self.boxes[storekeeper_n]:
            box_n = dir_shift(d, storekeeper_n)
            if self.walls[box_n] or self.boxes[box_n]:
                return False

            self.boxes[storekeeper_n] = False
            self.boxes[box_n] = True
            self.storekeeper = storekeeper_n

        else:
            self.storekeeper = storekeeper_n

        return True

    def is_solved(self):
        return (self.boxes == self.storages).all()

    def check_solution(self, sol):
        for d in sol:
            if not self.step(d): return False
        return self.is_solved()

if __name__ == "__main__":
    import argparse
    import os
    from data_loader import load_xsb_levels

    parser = argparse.ArgumentParser(prog='soko_basic',
                                     description='Check a ".mov" solution generated by sokodlex',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--datadir', type = str, default = "data/Large Test Suite Sets/")
    parser.add_argument('--data_suffix', type = str, default = ".xsb")
    parser.add_argument('fname', type=str, help='solution file_name, path is expected to correspond to the levelset')
    args = parser.parse_args()

    level_var_dir, _ = os.path.split(args.fname)
    _, level_fname = os.path.split(level_var_dir)
    i = level_fname.rindex('_l')
    level_i = int(level_fname[i+2:])
    levelset_fname = os.path.join(args.datadir, level_fname[:i]+args.data_suffix)
    print("Solution:", args.fname)
    print("Levelset:", levelset_fname)
    print("Level:", level_i)

    levels = load_xsb_levels(levelset_fname)
    level = levels[level_i-1]
    with open(args.fname) as f:
        line = next(f)
    sol = [c_to_dir[d] for d in line.strip()]
    if SokoBasic(level).check_solution(sol):
        print("Valid solution")
    else:
        print("!!! Invalid solution")
